[project]
name = "craft-store"
description="Store bindings for Snaps and Charms"
dynamic = ["version", "readme"]
authors = [
    {name = "Canonical Ltd.", email = "snapcraft@lists.snapcraft.io"},
]
dependencies = [
    "annotated-types>=0.6.0",
    "keyring>=23.0",
    "overrides>=7.0.0",
    "requests>=2.27.0",
    "requests-toolbelt>=1.0.0",
    "macaroonbakery>=1.3.0,!=1.3.3",
    "pydantic~=2.8",
    "pyxdg>=0.26",
    "jaraco-classes>=3.4.0",
    "httpx>=0.28",
    "typing_extensions>=4.12",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"

[project.urls]
"Documentation" = "https://craft-store.readthedocs.io/en/latest/"
"Source" = "https://github.com/canonical/craft-store"
"Issues" = "https://github.com/canonical/craft-store/issues"

[project.optional-dependencies]
lint = [
    "codespell[toml]~=2.3",
    "yamllint~=1.35"
]
types = [
    "mypy[reports]~=1.13",
    "types-PyYAML",
    "types-Pygments",
    "types-colorama",
    "types-docutils",
    "types-requests",
    "types-setuptools",
]
docs = [
    "furo==2024.8.6",
    "lxd-sphinx-extensions==0.0.16",
    "myst-parser==4.0.0",
    "pyspelling==2.10",
    "sphinx==8.1.3",
    "sphinx-autobuild==2024.10.3",
    "sphinxcontrib-jquery==4.1",
    "sphinx-copybutton==0.5.2",
    "sphinx-design==0.6.1",
    "sphinxext-opengraph==0.9.1",
    "sphinx-lint==1.0.0",
    "sphinx-notfound-page==1.0.4",
    "sphinx-reredirects==0.1.5",
    "sphinx-rtd-theme",
    "sphinx-tabs==3.4.7",
    "sphinx-toolbox>=2.5.0",
]
release = [
    "twine",
    "wheel",
]

[tool.uv]
constraint-dependencies = [
    # Basic constraints to allow --resolution=lowest
    "build>=0.7.0",
    "cffi>=1.15",
    "iniconfig>=1.1.0",
    "libnacl>=2.0",
    "lxml>=5.0",
    "protobuf>=5.0",
    "pyparsing>=3.0.0",
    "pyproject-hooks>=1.0.0",
    "pyyaml>=5.0",
    "markdown>=3.0",
    "markupsafe>=2.0",
    "pynacl>=1.5",
    "pytz>=2020",
    "pyyaml>5.0",
    "regex>=2021.11.10",
    "setuptools>=50",
    "sphinx-basic-ng>=1.0.0b1",
    "tornado>=4.0",
    "urllib3>=2.0",
    "webencodings>=0.4.0",
    "wheel>=0.38",
]
dev-dependencies = [
    "build",
    "pyyaml>=6.0.0",
    "coverage[toml]==7.6.2",
    "pytest==8.3.3",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest-check>=2.0",
    "pytest-subprocess>=1.5",
    "pytest-timeout>=2.0",
    "pytest-httpx>=0.35",
]

[build-system]
requires = [
    "setuptools==75.6.0",
    "setuptools_scm[toml]>=7.1"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-data = {"craft_store" = ["py.typed"]}

[tool.setuptools.dynamic]
readme = {file = "README.md"}

[tool.setuptools_scm]
write_to = "craft_store/_version.py"
# the version comes from the latest annotated git tag formatted as 'X.Y.Z'
# version scheme:
#   - X.Y.Z.post<commits since tag>+g<hash>.d<%Y%m%d>
# parts of scheme:
#   - X.Y.Z - most recent git tag
#   - post<commits since tag>+g<hash> - present when current commit is not tagged
#   - .d<%Y%m%d> - present when working dir is dirty
# version scheme when no tags exist:
#   - 0.0.post<total commits>+g<hash>
version_scheme = "post-release"
# deviations from the default 'git describe' command:
# - only match annotated tags
# - only match tags formatted as 'X.Y.Z'
git_describe_command = "git describe --dirty --long --match '[0-9]*.[0-9]*.[0-9]*' --exclude '*[^0-9.]*'"

[tool.setuptools.packages.find]
include = ["*craft*"]
namespaces = false

[tool.black]
target-version = ["py310"]

[tool.codespell]
ignore-words-list = "buildd,crate,keyserver,comandos,ro,dedent,dedented"
skip = ".tox,.git,build,.*_cache,__pycache__,*.tar,*.snap,*.png,./node_modules,./docs/_build,.direnv,.venv,venv,.vscode"
quiet-level = 3
check-filenames = true

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = "tests"
xfail_strict = true
markers = [
    "disable_fake_keyring",
    "slow: tests that take a long time",
]

[tool.coverage.run]
branch = true
omit = ["tests/**"]

[tool.coverage.report]
skip_empty = true
exclude_also = [
    "if (typing\\.)?TYPE_CHECKING:",
]

[tool.pylint.messages_control]
disable = "too-many-ancestors,too-few-public-methods,fixme,unspecified-encoding,use-implicit-booleaness-not-comparison,unnecessary-lambda-assignment"

[tool.pylint.similarities]
min-similarity-lines=12

[tool.pylint.format]
max-line-length = "100"
max-locals = 16

[tool.pylint.MASTER]
extension-pkg-whitelist = [
    "pydantic"
]
load-plugins = "pylint_fixme_info,pylint_pytest"

[tool.pyright]
#strict = ["craft_store"]  # Disabled because pyrightconfig.json didn't include this.
pythonVersion = "3.10"
pythonPlatform = "Linux"
include = [
    "craft_store",
    "tests",
]
exclude = [
    "**/__pycache__",
    "**/.mypy_cache",
    "**/.pytest_cache",
    ".direnv",
    ".tox",
    ".venv",
    "build",
    "craft_store/_version.py",
    "docs",
    "venv",
]

[tool.mypy]
python_version = "3.10"
plugins = ["pydantic.mypy"]
exclude = [
    "build",
    "tests",
    "results",
    "docs",
]
warn_unused_configs = true
warn_redundant_casts = true
strict_equality = true
strict_concatenate = true
warn_return_any = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true

[[tool.mypy.overrides]]
module = ["craft_store.*"]
disallow_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = ["tests.*"]
strict = false

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["craft_store", "tests"]
extend-exclude = [
    "docs",
    "__pycache__",
    "docs/sphinx-docs-starter-pack",
]

[tool.ruff.lint]
# Follow ST063 - Maintaining and updating linting specifications for updating these.
select = [  # Base linting rule selections.
    # See the internal document for discussion:
    # https://docs.google.com/document/d/1i1n8pDmFmWi4wTDpk-JfnWCVUThPJiggyPi2DYwBBu4/edit
    # All sections here are stable in ruff and shouldn't randomly introduce
    # failures with ruff updates.
    "F",  # The rules built into Flake8
    "E", "W",  # pycodestyle errors and warnings
    "I",  # isort checking
    "N",  # PEP8 naming
    "D",  # Implement pydocstyle checking as well.
    "UP",  # Pyupgrade - note that some of are excluded below due to Python versions
    "YTT",  # flake8-2020: Misuse of `sys.version` and `sys.version_info`
    "ANN",  # Type annotations.
    "BLE",  # Do not catch blind exceptions
    #"FBT",  # Disallow boolean positional arguments (make them keyword-only)
    "B0",  # Common mistakes and typos.
    "A",  # Shadowing built-ins.
    "C4", # Encourage comprehensions, which tend to be faster than alternatives.
    "T10",  # Don't call the debugger in production code
    "ISC",  # Implicit string concatenation that can cause subtle issues
    "ICN",  # Only use common conventions for import aliases.
    "INP",  # Implicit namespace packages
    "PYI",  # Linting for type stubs.
    "PT",  # Pytest
    "Q",  # Consistent quotations
    "RSE",  # Errors on pytest raises.
    "RET",  # Simpler logic after return, raise, continue or break
    "SIM",  # Code simplification
    "TC004",  # Remove imports from type-checking guard blocks if used at runtime
    "TC005",  # Delete empty type-checking blocks
    "ARG",  # Unused arguments
    "PTH",  # Migrate to pathlib
    "ERA",  # Don't check in commented out code
    "PGH",  # Pygrep hooks
    "PL",  # Pylint
    "TRY",  # Cleaner try/except,
]
extend-select = [
    # Pyupgrade: https://github.com/charliermarsh/ruff#pyupgrade-up
    "UP00", "UP01", "UP02", "UP030", "UP032", "UP033",
    # "UP034",  # Very new, not yet enabled in ruff 0.0.227
    # Annotations: https://github.com/charliermarsh/ruff#flake8-annotations-ann
    "ANN0",  # Type annotations for arguments other than `self` and `cls`
    "ANN2",  # Return type annotations
    "B026",  # Keyword arguments must come after starred arguments
    # flake8-bandit: security testing. https://github.com/charliermarsh/ruff#flake8-bandit-s
    # https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    "S101", "S102",  # assert or exec
    "S103", "S108",  # File permissions and tempfiles - use #noqa to silence when appropriate.
    "S104",  # Network binds
    "S105", "S106", "S107",  # Hardcoded passwords
    "S110",  # try-except-pass (use contextlib.suppress instead)
    "S113",  # Requests calls without timeouts
    "S3",  # Serialising, deserialising, hashing, crypto, etc.
    "S506",  # Unsafe YAML load
    "S508", "S509",  # Insecure SNMP
    "S701",  # jinja2 templates without autoescape
    "RUF001", "RUF002", "RUF003",  # Ambiguous unicode characters
    "RUF005",  # Encourages unpacking rather than concatenation
    "RUF008",  # Do not use mutable default values for dataclass attributes
    "RUF100",  # #noqa directive that doesn't flag anything
]
ignore = [
    "ANN10",  # Type annotations for `self` and `cls`
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    #"E203",  # Whitespace before ":"  -- Commented because ruff doesn't currently check E203
    "E501",  # Line too long (reason: black will automatically fix this for us)
    "D105",  # Missing docstring in magic method (reason: magic methods already have definitions)
    "D107",  # Missing docstring in __init__ (reason: documented in class docstring)
    "D203",  # 1 blank line required before class docstring (reason: pep257 default)
    "D213",  # Multi-line docstring summary should start at the second line (reason: pep257 default)
    "D215",  # Section underline is over-indented (reason: pep257 default)
    "A003",  # Class attribute shadowing built-in (reason: Class attributes don't often get bare references)
    "PLR0913", # Too many arguments to function call (n > 5)
    "PLR2004", # Magic value used in comparison, consider replacing 5 with a constant variable
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
              # (reason: this creates long lines that get wrapped and reduces readability)

    # Ignored due to common usage in current code
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [  # Some things we want for the moin project are unnecessary in tests.
    "D",  # Ignore docstring rules in tests
    "ANN", # Ignore type annotations in tests
    "S101",  # Allow assertions in tests
    "S103", # Allow `os.chmod` setting a permissive mask `0o555` on file or directory
    "S108", # Allow Probable insecure usage of temporary file or directory
    "PLR0913",  # Allow many arguments for test functions
]
# isort leaves init files alone by default, this makes ruff ignore them too.
"__init__.py" = ["I001"]
